SFT221 - Workshop 6 - Reflection

Question 1: Did you find more bugs using the log file or assertions? Why did one work better than the other?
Answer 1: Using assertions instead of just log files proven to be more successful in my debugging experience. Assertions are easy to use, provide instant feedback, identify flaws precisely, and are especially helpful in the testing and development stages of a project. They improve the efficiency of the debugging process by lowering the requirement for manual log file analysis. Assertions are superior than log files for accurate problem identification and early bug detection during development and testing, even though log files are useful for monitoring in production situations.

Question 2: Do you like to debug using log files or the debugger? Why do you prefer one over the other? Can you envision a situation where you would only be able to use log files? Would you be able to debug as well? Would you be able to debug at the same speed as using a debugger, slower or faster?
Answer 2: Because of its efficiency, accuracy, and real-time input, I prefer using a debugger for debugging. I do accept, though, that log files are necessary in scenarios—like production environments or remote debugging—where real-time debugging is not practical. Using a debugger to debug is usually quicker and more efficient than analyzing log files, which can take time. Being proficient in both approaches is important for having a broad range of debugging abilities.

Question 3: How did you gain confidence that you had found all the bugs? Would you bet your life savings that you found all the bugs? If not, what would you do so that you would feel comfortable betting that you had found all the bugs?
Answer 3: It might be challenging to be 100% certain that every bug has been found in software due to its complexity and potential for unanticipated issues. It is essential to apply rigorous testing, peer reviews, unit testing, regression testing, user testing, continuous improvement, and production monitoring to increase bug identification. Even though software is notoriously unpredictable, it is not realistic to risk one's entire life savings trying to track out every flaw. Instead, the focus should be on lowering risks, continuously improving the development and testing processes, and maintaining a high degree of trust in the software's quality—all while admitting that there might always be some degree of uncertainty.