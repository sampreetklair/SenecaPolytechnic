Reflection: SFT211 ZBB - Workshop 5
Student Name: Sampreet Klair
Student Number: 145031225
Student ID: sklair2

Question 1: What was the most useful debugger tool you used to find the bugs? Why was it more useful than other techniques you tried?
Answer 1: The "Breakpoint" function of the Visual Studio debugger was the most helpful debugging tool I utilized. It gave me the ability to halt the execution of the program at certain locations in the code and examine variable values and program flow immediately. Since it gave me precise control over where I wanted to look at potential problems, this was more helpful than previous techniques. I was able to focus on the trouble spots and locate the faults quickly by placing breakpoints at key locations in the code.

Question 2: Which debugger features did you NOT use? Why did you not use these features? For each feature you did not use, give an example of a problem you would use it for.
Answer 2: I did not make use of some debugger features like "Tracepoints" and "Data Tips." Because these features are better suited for particular debugging scenarios, they were not required for the problems with this code and were therefore not used in this instance. For adding unique trace messages or actions while debugging, "Tracepoints" are helpful. Tracepoints might be used, for instance, if I required to log certain variable values at specified locations throughout the code for diagnostic purposes. Without explicitly adding a watch expression, "Data Tips" let you to hover over a variable to observe its value. Because I preferred using watch expressions and the Watch window to examine variable values, I didn't use this functionality.

Question 3: Which do you think is a faster way to find bugs: a. Using the debugger alone, b. Using print statements alone, c. Using the debugger and print statements? Justify your answer.
Answer 3: For effective debugging, combining the use of print statements and the debugger is a potent strategy. The debugger gives developers exact control over code execution and real-time information, enabling them to locate errors fast and comprehend them at a high level. Print statements, on the other hand, are useful diagnostic tools for collecting particular data points and interim findings that might not be immediately accessible in the debugger. Developers can explore the code, identify issue regions, and implement print statements to log pertinent information as necessary by carefully combining various strategies. This repeated procedure improves debugging and makes it easier to comprehend the behaviour of the code. To preserve code clarity and readability, it's essential to maintain clean code, record the debugging process, and remove or disable print statements once problems are fixed.

Question 4: How did you test the program to find the bugs and to make sure you had fixed the bugs? Did you use any additional test data other than that supplied? If so, describe the techniques you used to create the test data. How confident are you that you found all the bugs?
Answer 4: I did the following to test the program and look for bugs: To find the problems in the code first, I used the test data that was provided. I created breakpoints, looked at variable values, and stepped through the code using the Visual Studio debugger to find the issues. To make sure that the errors were corrected and the program worked properly, I tested the code using a variety of inputs, including some edge cases. To ensure the code's robustness, I also prepared the extra test data with various string kinds, including those devoid of numerals or other special characters.